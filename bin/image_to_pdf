#!/usr/bin/env ruby
# encoding: utf-8

require 'getoptlong'
require 'image_to_pdf'

Usage = <<EOF
Usage: image_to_pdf [options] file1
Options:
  -h, --help                Print this help message and exit
  -v, --version             Print version information and exit
EOF

VersionInfo = "image_to_pdf v#{ImageToPdf::VERSION}"

def parse_arguments
  opts = GetoptLong.new(
    ['--help',    '-h', GetoptLong::NO_ARGUMENT],
    ['--version', '-v', GetoptLong::NO_ARGUMENT]
  )

  STDERR.puts ARGV.inspect
  
  begin
    opts.each do |opt, arg|
      case opt
        when '--help'
          puts Usage
          exit 0
        when '--version'
          puts VersionInfo
          exit 0
      end
    end
  rescue GetoptLong::MissingArgument
    exit 1
  end  
  
  if ARGV.size < 1
    STDERR.puts "Error: no input files"
    STDERR.puts Usage
    exit 1
  elsif ARGV.size == 1 
    filename = ARGV[0]
    unless File.file?(filename) and File.readable?(filename)
      STDERR.puts "Error: not a readable file: #{filename}"
      exit 1
    end

    unless ['.png', '.jpg', '.jpeg'].include?(File.extname(filename))
      STDERR.puts "Error: illegal file type: #{filename}"
      exit 1
    end
    filename
  end

#  ARGV.each do |filename|
#    unless File.file?(filename) and File.readable?(filename)
#      STDERR.puts "Error: not a readable file: #{filename}"
#      exit 1
#    end

#    unless ['.png', '.jpg', '.jpeg'].include?(File.extname(filename))
#      STDERR.puts "Error: illegal file type: #{filename}"
#      exit 1
#    end
#  end

end

image_path = parse_arguments

begin
  ImageToPdf.convert(image_path)
rescue Exception => e
  STDERR.puts "Error: unexpected exception (#{e.class}): #{e}"
  exit 127
end
